[
["index.html", "Software Installation Guide Chapter 1 Introduction 1.1 Purpose 1.2 Installation Options", " Software Installation Guide Francisco Rowe, Dani Arribas-Bel 2020-09-14 Chapter 1 Introduction Add some brief context on why this is important and needed in the context of COVID-19 and done in Foundation Week! Restricted access to University computers Consistency in installation No concerns with software and focus on module content during the semester 1.1 Purpose This guide provides step-by-step description on how to install and access Python from your own computer. Three alternatives are described: (1) local installation via Docker; (2) native local installation; and, (3) remote access. 1.2 Installation Options Installation options depend on your operating system. This guide supports MacOS, Linux and Windows operating systems. 1.2.1 MacOS, Linux and Windows 10 Pro/Student users Figure 1.1 displays the installation options available for MacOS, Linux and Windows 10 Pro/Student users. The tree reflects our recommended installation. We strongly (1) local installation via Docker as the default option. If that is not possible, we recommend (2) native local installation as a second option. Failing this, we recommend (3) remote access to University computers. This last option requires good and stable internet connection. If any of these options work, you must attend one of the drop-in sessions in Foundation Week. Figure 1.1: Decision Tree: Recommended installation for MacOS, Linux and Windows 10 Pro/Student users For step-by-step instructions of the installation options listed in Figure 1.1, dedicated guides have been created. MacOS users should refer to Chapter 2. Linux users should refer to Chapter @ref{#linux}. Windows 10 Pro/Student users should refer to Chapter @ref{#win10pro}. 1.2.2 Other Windows users For other Windows users, including other versions of Windows 10, option (1) local installation via Docker is NOT available. Figure 1.2 shows the options available to these users. We strongly (1) a native local installation as the default option. If that is not possible, we recommend (2) remote access as a second option to University computers. Failing this, you must attend one of the drop-in sessions in Foundation Week. Step-by-step instructions for other Windows users are provided in Chapter {#otherwin}. Figure 1.2: Decision Tree: Recommended installation for other Windows users Other parts that we might consider including: "],
["mac.html", "Chapter 2 MacOS Installation 2.1 Installing Docker 2.2 Running Python through Docker", " Chapter 2 MacOS Installation Instructions to install, test and run gds_env with the Docker for Mac Desktop app. For each of the sections, add: Step-by-step instructions Insert screenshots for each step Insert a video with instructions 2.1 Installing Docker Draw on instructions from here and here and here 2.1.1 Requirements 2.1.2 Install steps 2.1.3 Check success 2.2 Running Python through Docker "],
["linux.html", "Chapter 3 Linux Installation 3.1 Installing Docker 3.2 Running Python through Docker", " Chapter 3 Linux Installation Instructions to install, test and run gds_env with Docker for . For each of the sections, add: Step-by-step instructions Insert screenshots for each step Insert a video with instructions 3.1 Installing Docker Draw on instructions from here and here and here 3.1.1 Requirements 3.1.2 Install steps 3.1.3 Check success 3.2 Running Python through Docker "],
["win10pro.html", "Chapter 4 Windows 10 Pro/Student Installation 4.1 Installing Docker 4.2 Running Python through Docker", " Chapter 4 Windows 10 Pro/Student Installation Instructions to install, test and run gds_env with the Docker Windows app. For each of the sections, add: Step-by-step instructions Insert screenshots for each step Insert a video with instructions 4.1 Installing Docker Draw on instructions from here and here and here 4.1.1 Requirements 4.1.2 Install steps 4.1.3 Check success 4.2 Running Python through Docker "],
["otherwin.html", "Chapter 5 Other Windows versions: Native installation 5.1 Installing Python 5.2 Running Python", " Chapter 5 Other Windows versions: Native installation In this block, we will cover how to install Python if your machine is running Windows 10 Home, or an earlier version of Windows (e.g. Windows 7). With this approach, you will install Python “natively”, that is running directly on your operating system (as opposed to through some virtualisation strategy like Docker). 5.1 Installing Python 5.1.1 Requirements To complete successfully this installation route, you will need the following: A good internet connection The gds_py.yml file that you can download on this link (right click and “Save Link As” to download it to your computer) The jl_setup.bat file that you can download on this link A copy of Miniconda for Windows and Python 3.8 (donwload it from this page). Make sure you choose the architecture of your computer (most modern computers will use 64bit) For the sake of the illustration, we will assume you place the two files (gds_py.yml and jl_setup.bat) on the C:\\Users\\username\\Downloads folder. You do not need to choose this folder but, if you use a different one, please adjust all instructions below accordingly. 5.1.2 Install steps This process should take overall about one hour, so prepare accordingly. Most of that time however will be the computer “doing its own thing”, and you will not need to do much other than making sure it’s still ticking and not returning errors. Here are the steps: Install Miniconda. Double click on the .exe file you will have downloaded and follow steps as suggested Create environment. This is the step that will install most of what you will need and hence also the longest one. Here’s how you can do it: Open the Start menu and search for the “Anaconda Prompt”. Launch the programme Navigate to the folder where you have placed all the required files (C:\\Users\\username\\Downloads in this guide) cd C:\\Users\\username\\Downloads Run the following command: conda-env create -f gds_py.yml This step requires that gds_py.yml exists in C:\\Users\\username\\Downloads and will take a while, depending on the speed of your connection but no less than 15-20 minutes. Grab a cuppa and be patient! Activate the environment. For that, run the following command from the same terminal: conda activate gds If the environment is activated, (gds) will appear at the beginning of the line in your command prompt 1. Complete environment setup. Now, still from the same command prompt, run the following: ./jl_setup.bat This step reuires that jl_setup.bat exists in C:\\Users\\username\\Downloads and will also take a while, depending on the speed of your connection but no less than 10-15 minutes. Be patient, we’re almost there! 5.1.3 Check success If you have followed and completed the steps above without issues, congratulations, you are all set! To make sure everything has gone according to plan, here is a check you can perform. To complete it, follow these steps: Download the “checker” file check_py_stack.ipynb from here (right click and “Save Link As”) and place it in the same folder as all the previous ones (in this guide, C:\\Users\\username\\Downloads) From the same terminal as above, with the environment activated (you’ll know that the case if (gds) is at the top of the line in the command prompt), run: jupyter nbconvert --to html --execute check_py_stack.ipynb This will take a little bit and, if it succeeds, it will produce a file called check_py_stack.html that you can open on your browser to inspect. If there are no errors and every cell has been run (marked by every cell being assigned a number), you are all set!!! 5.2 Running Python If the steps above have completed correctly, you are all set and ready to use Python on your own computer. Using Python is a lot faster and more straightforward than installing Python, so the hardest is past already. To launch a new Python session, you can follow these steps: Open an Anaconda Prompt by going to the “Start Menu” and typing “Anaconda Prompt”; when you find the app, click on it and the same command prompt you used for installation will launch Navigate to the folder from where you would like to launch your session (for example, your home directory: C:\\Users\\username): cd C:\\Users\\username Launch Jupyter Lab by running the following command: jupyter lab This will launch your default browser with a brand new Python session. We recommend using Firefox or Chrome. If your default is not one of those, you can: 1. Close the window that opens automatically 1. Open Firefox/Chrome and point it to http://localhost:8888 1. A page will load that asks for a token, copy the one-time token from the command prompt "],
["references.html", "References", " References "]
]
