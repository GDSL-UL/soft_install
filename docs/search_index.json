[
["index.html", "Software Installation Guide Purpose", " Software Installation Guide Francisco Rowe, Dani Arribas-Bel 2020-10-05 Purpose This guide provides step-by-step description on how to install and access Python from your own computer. Select your Operating System and follow the steps. A1 MacOS Installation A2 Linux Installation A3 Windows 10 Pro/Education A4 Windows 10 Home/pre-10 Need to find out your Windows version? Click HERE "],
["macos-installation.html", "MacOS Installation Installation Running Python", " MacOS Installation NOTE This guide shows you how to install on Linux via the gds_env (Arribas-Bel 2019) Installation Requirements To be able to complete this guide, your machine will need to meet the following requirements: A stable internet connection ~10GB of space on your hard drive MacOS version 10.13 or newer i.e. High Sierra, Mojave or Catalina. If you are unsure what version you are running click on the Apple icon in the top left of the screen and then About this Mac. Mac hardware must be a 2010 model or newer Docker install steps Go to the dockerhub website. Ensure you meet the criteria for download (it is the same as stated above) and then select ‘Get Stable’ button. This will then download to your machine but may take some time. Once finished, to access this download go to Finder &gt; Downloads &gt; Docker.dmg and double click. You should then be prompted to drag and drop this application into the applications folder like so: You may get further windows asking for access to the program. To these you can click Open &gt; Ok &gt; enter your account password and click Install helper After you have done this, the whale icon should now show in your taskbar: You have successfully downloaded Docker! Using Docker Now we have Docker installed we can use it to access Python and all the associated packages we need for the practicals Installing the GDS environment Access your terminal: Launchpad &gt; Other &gt; Terminal In a fresh line in the terminal type the following to install the GDS environment container: docker pull darribas/gds:5.0 This should now prompt a long download process that looks a bit like this: Dont be alarmed if it seems to take a very long time. IMPORTANT: Make sure you are connected to the internet and it is a stable connection. This step involves the download of large amounts of data (ca. 10GB) so it might take a while. However, it only needs to be run once. Check success You will know the process has completed successfully when each line says ‘Pull complete’ and the new line gives your machine name followed by a $ sign. If everything has gone according to plan, you should see darribas/gds:5.0 show up on your terminal when you type docker image ls (note in the image below there are other containers that are not required, do not worry if you don’t have those or slightly different values on the ID and the “CREATED” columns, the important bit is having darribas/gds:5.0 listed): Running Python The following sections cover how to spin up a session you have just installed, use it, and shut it down when you are done. Running the container In the new terminal line type the following command to run the container: docker run --rm -ti -p 8888:8888 -v ${PWD}:/home/jovyan/work darribas/gds:5.0 You have now started a Python session. IMPORTANT: Please do NOT close the terminal window until you are finished in this Python session To access this session go to your chosen web browser (e.g. Safari/Chrome) and type: localhost:8888 into the search bar The page that loads will prompt you for a password or a token. This can be found in the text in the terminal following the last command you ran (step 9). A long series of numbers and letters will be preceded by ?token=. Copy this long series of characters and paste into the password box in your browser. Now you are in Jupyter Lab you can open up a Python 3 notebook Using Jupyter Notebook This notebook is where you will run your code. Each shaded box is called a kernel. To test this out you can type print('test') into one of these kernels. To run the code use the shortcut Ctrl + Enter. IMPORTANT: Make sure you save files you want to keep ONLY within the work folder, as this will ensure they are saved on your machine. Everything saved outside the work folder will be destroyed as soon as you shut down the session. You can save your notebook using File &gt; Save notebook as You can create new folders to organise your work And you can access other files on your machine through the ‘Work’ folder in the File Browser. From here you can navigate to your Documents and designated folder for this module Ending your session Once you have finished in your Jupyter session and have saved all your work, you can end the session from the terminal. Using Ctrl + C will prompt a y/n option. Either type y or Ctrl + C again to end the session. You can now safely shut the terminal window. Next time you go to run a Jupyter Notebook you will not need to repeat the whole process as you have already installed Docker and the GDS environment. Instead you can start from Running the container and carry on from there. References "],
["linux.html", "Linux Installation Installation Running Python", " Linux Installation NOTE This guide shows you how to install on Linux via the gds_env (Arribas-Bel 2019) Installation Requirements To be able to complete this guide, your machine will need to meet the following requirements: A stable internet connection ~10GB of space on your hard drive A Linux distribution supported by Docker. You can check available distributions for ready installation on this page. NOTE If you are running a different distribution (e.g. Arch Linux), there is a good chance Docker will work, but you will have to source your own instructions for installation. Once you have Docker up and running on your machine, you can move to Installing the GDS container. Docker install steps Select the page for your distribution from the Docker Hub list of supported distributions For this example, we will use Ubuntu. Make sure that you meet the requirements to install Docker: Follow the steps specified on the official install guide: https://docs.docker.com/engine/install/ubuntu/ Once you complete these steps successfully, you will have Docker ready to go on your computer, congratulations! Installing the GDS container Once you have Docker installed and running on your machine, installing everything you need to run Python and associated libraries boils down to the following two steps: Open your terminal app of choice (for example, Gnome Terminal) Run the following command: docker pull darribas/gds:5.0 You will know this has completed when each line says ‘Pull complete’. IMPORTANT: Make sure you are connected to the internet and it is a stable connection. This step involves the download of large amounts of data (ca. 10GB) so it might take a while. However, it only needs to be run once. Check success If everything has gone according to plan, you should see darribas/gds:5.0 show up on your terminal when you type docker image ls (note in the image below there are other containers that are not required, do not worry if you don’t have those or slightly different values on the ID and the “CREATED” columns, the important bit is having darribas/gds:5.0 listed): Running Python The following sections cover how to spin up the container you have just installed, use it, and shut it down when you are done. Running the container To start up Python through Docker, follow these steps: In a new terminal line, type the following command to run the container and hit enter: docker run --rm -ti -p 8888:8888 -v ${PWD}:/home/jovyan/work darribas/gds:5.0 You have now started a Python session. IMPORTANT: Please do NOT close the terminal window until you are finished in this Python session To access this session go to your chosen web browser (e.g. Firefox/Chrome) and type: localhost:8888 into the search bar The page that loads will prompt you for a password or a token. This can be found in the text in the terminal following the last command you ran (step 9). A long series of numbers and letters will be preceded by ?token=. Copy this long series of characters and paste into the password box in your browser. Now you are in Jupyter Lab you can open up a Python 3 notebook Using Jupyter Notebook This notebook is where you will run your code. Each shaded box is called a kernel. To test this out you can type print('test') into one of these kernels. To run the code use the shortcut Ctrl + Enter. IMPORTANT: Make sure you save files you want to keep ONLY within the work folder, as this will ensure they are saved on your machine. Everything saved outside the work folder will be destroyed as soon as you shut down the session. You can save your notebook using File &gt; Save notebook as You can create new folders to organise your work And you can access other files on your machine through the ‘work’ folder in the File Browser. From here you can navigate to your Documents and designated folder for this module Ending your session Once you have finished in your Jupyter session and have saved all your work, you can end the session from the terminal. Using Ctrl + C will prompt a y/n option. Either type y or Ctrl + C again to end the session. You can now safely shut the terminal window. Next time you go to run a Jupyter Notebook you will not need to repeat the whole process as you have already installed Docker and the GDS environment. Instead you can start from [Running Python through Docker] and carry on from there. References "],
["win10pro.html", "Windows 10 Pro/Education Installation Running Python", " Windows 10 Pro/Education NOTE This guide shows you how to install on Windows 10 Pro via the gds_env (Arribas-Bel 2019) Installation Requirements To be able to complete this guide, your machine will need to meet the following requirements: A stable internet connection ~10GB of space on your hard drive Windows 10 64-bit: Pro, Enterprise, or Education (Build 16299 or later). You can see the full requirements on the official Docker for Windows page. IMPORTANT: If you are not sure what version of Windows you are running, check out this guide. If you know you don’t have Windows 10 Pro, for example you are running Windows 10 Home, please use this install/run guide. Docker install steps Once you have everything required ready to go, the first step is to install the Docker Desktop App for Windows. Here are the steps you can follow: Head over to Docker Hub to download a copy of Docker for Windows: https://hub.docker.com/editions/community/docker-ce-desktop-windows/ Download a copy of the Stable version (circled in red on the image above). Note this is about 400Mb so, depending on your connection, it might take a little bit. Double click on the file you downloaded (a white cute whale on a blue background) and the “installation wizard” will appear. Follow the instructions on the installation wizard to authorize the installer and proceed with the install. You can check the process has completed successfully by following these steps: Open PowelShell from the “Start Menu” Check Docker is available by printing out the version you have installed: docker --version Note that you might have installed a slightly different version and that is totally OK. What you want to make sure is that it successfully prints out a version instead of a warning/error message (usually in red). Installing the GDS container Once you have Docker installed and running on your machine, installing everything you need to run Python and associated libraries boils down to the following two steps: Open PowerShell following the same steps as above (you can use the same window as before or a fresh new one). Run (type and hit “Enter”) the following command: docker pull darribas/gds:5.0 You will know this has completed when each line says ‘Pull complete’. IMPORTANT: Make sure you are connected to the internet and it is a stable connection. This step involves the download of large amounts of data (ca. 10GB) so it might take a while. However, it only needs to be run once. Check success If everything has gone according to plan, you should see darribas/gds:5.0 show up on your terminal when you type docker image ls (note in the image below there are other containers that are not required, do not worry if you don’t have those or slightly different values on the ID and the “CREATED” columns, the important bit is having darribas/gds:5.0 listed): Running Python The following sections cover how to start up the software you have just installed, use it, and shut it down when you are done. Running the container To start up Python through Docker, follow these steps: In a new PowerShell window, type the following command to run the container and hit enter: docker run --rm -ti -p 8888:8888 -v ${PWD}:/home/jovyan/work darribas/gds:5.0 You have now started a Python session. IMPORTANT: Please do NOT close the PowerShell window until you are finished in this Python session To access this session go to your chosen web browser (e.g. Firefox/Chrome) and type: localhost:8888 into the search bar. You should see something similar to: The page that loads will prompt you for a password or a token. This can be found in the text in the terminal following the last command you ran. This will be a long series of numbers and letters will be preceded by ?token=. Copy this long series of characters and paste into the password box in your browser. Now you are in Jupyter Lab, it should look like this, more or less: Using Jupyter Notebook This notebook is where you will run your code. Each shaded box is called a kernel. To test this out you can type print('test') into one of these kernels. To run the code use the shortcut Ctrl + Enter. IMPORTANT: Make sure you save files you want to keep ONLY within the work folder, as this will ensure they are saved on your machine. Everything saved outside the work folder will be destroyed as soon as you shut down the session. You can save your notebook using File &gt; Save notebook as You can create new folders to organise your work And you can access other files on your machine through the ‘work’ folder in the File Browser. From here you can navigate to your Documents and designated folder for this module Ending your session Once you have finished in your Jupyter session and have saved all your work, you can end the session from the terminal. Using Ctrl + C will prompt a y/n option. Either type y or Ctrl + C again to end the session. You can now safely shut the terminal window. Next time you go to run a Jupyter Notebook you will not need to repeat the whole process as you have already installed Docker and the GDS environment. Instead you can start from Running Python through Docker and carry on from there. References "],
["otherWin.html", "Windows 10 Home/pre-10 Installation Running Python", " Windows 10 Home/pre-10 This guide covers the installation of Python on machines running Windows 10 Home Edition of versions of Windows prior to Windows 10 (e.g. Windows 7). With this approach, you will install Python “natively”, that is running directly on your operating system. TIP: If you are unsure what version of Windows you are running, please check out this guide first. Installation This process involves a few steps: Requirements: gather everything you will need before getting started Miniconda Install: install the programme that will allow you to install Python GDS Environment: turbo charge your Python installation Extra addon’s: put the final touches on the install Success check: certify everything went smoothly Make sure you complete each successfully before moving on to the next. Requirements To complete successfully this installation route, you will need the following: A good internet connection The gds_py.yml file that you can download on this link. Right click and “Save Link As” to download it to your computer, as illustrated in the blue box below. The jl_setup.bat file that you can download on this link. Right click and “Save Link As” to download it to your computer, as illustrated in the blue box below. TIP: To download these files, follow these steps with each: Right-click on the link to each file and select “Save link as” This will prompt a window as below. Select a destination to download it to (the Desktop, for example) and hit “Save” A copy of Miniconda for Windows and Python 3.8. Make sure you check which architecture of Windows you are running before proceeding. TIP: To download Miniconda, follow these steps: Head over to the Download Page and select Python 3.8: We are using Python 3.8, so depending on which windows version you are using (32-bit or 64-bit), click on the relevant file in the Python 3.8 section (highlighted in red). This will download the Miniconda installation file. Depending on your setup and browser, you will need to select where to place it (the Desktop folder would be a good option) or it will go straight into a default location (e.g. the Downloads folder) For the sake of this guide, we will assume you download the two files (gds_py.yml and jl_setup.bat) and the Miniconda installer on the Desktop folder (C:\\Users\\username\\Desktop). You do not need to choose this folder but, if you use a different one, please adjust all instructions below accordingly. Minicoda Install The next step is to install the copy of Miniconda we just downloaded. To do that, follow these steps: Head over to the folder where you downloaded it (the Desktop in our case) Double click the downloaded file will open an installation window: Click Next on the first step. Click I Agree to the Terms and Conditions: 5. In the next window, we will select “Just Me” so no administrator rights are required: The next window will ask you where to install Miniconda. Unless you know what you are doing, leave the path (highlighted in blue) as is and click next: The next window can be used for an advanced setup. Unless you know what you are doing, leave the default settings as they are (ie. box ticked at Register Miniconda3 as my default Python 3.8). Click Install and the installation process will begin: Once the installation is complete, click Next. Untick all boxes in the window (unless you want further information on Miniconda, which will open in your browser) and click Finish: Install GDS Environment Once we have Miniconda ready to go, the next step is to install what we will call the GDS environment. This is a set of software packages that will allow us to do very cool stuff with Python and geographic data. This is the step that will install most of what you will need and hence also the longest one. Let’s get started! Head to the Windows icon on the bottom left of your screen and type Anaconda: Now click on Anaconda Prompt (miniconda3) (from now on we will refer to this as the Anaconda Prompt) This will launch a window that looks, more or less, like this: Now we need to “navigate” to the folder where you placed the files downloaded above (gds_py.yml and jl_setup.bat). In this illustration, we are using the Desktop folder, so you can run the following command: cd Desktop Note that you can move to a given folder by using the command cd myFolder to move forward through folders, and cd .. to move backwards. Once you have typed the command, press Enter. Once you have navigated to the location of your files (e.g. Desktop), run the following command in the Anaconda Prompt, and press enter to execute it: conda-env create -f gds_py.yml TIP: This step requires that gds_py.yml exists in the folder where you have directed the Anaconda Prompt (e.g. C:\\Users\\username\\Downloads) and will take a while, depending on the speed of your connection but no less than 15-20 minutes. Grab a cuppa and be patient! If everything has gone according to plan, your Anaconda Prompt should look a bit like this: This has created correctly the gds environment, congratulations! We are almost there. Now we need to activate the environment. For this, run the following command: conda activate gds Complete environment Setup The final step involves installing a few addon’s that will make interacting with data a lot smoother and fun. Let’s get to it! Ensure you have the gds environment activated. You will be able to check this by looking at the name that appears in parenthesis in the beginning of the last line of the Anaconda Prompt. If yours reads base, activate the gds environment by running: conda activate gds You can see that the start of the line has changed from (base) to (gds). On this very Anaconda Prompt window, let’s run the jl_setup.bat script. For this type the following: jl_setup.bat And hit enter. Your Anaconda Prompt should display a series of commands that looks, more or less, as follows: TIP: This step requires that jl_setup.bat exists in the same folder C:\\Users\\username\\Downloads and will also take a while, depending on the speed of your connection but no less than 10-15 minutes. Be patient, we’re almost there! When this completes, you are all set to go, congratulations!!! NOTE: Do not close the Anaconda prompt yet as we will need it again in the next section, to check everything is alright. Check Installation To make sure that your installation was successful and all packages have been installed we need to run one more thing. Here’re the steps to follow: Download the check_py_stack.ipynb file by right clicking on it and selecting Save link as. Make sure to use the same folder we have been using so far. From the same Anaconda Prompt as above, with the environment activated (you’ll know that the case if (gds) is at the top of the line in the command prompt), run: jupyter nbconvert --to html --execute check_py_stack.ipynb This will take a little bit and, if it succeeds, it will produce a file called check_py_stack.html that you can open on your browser to inspect. If there are no errors and every cell has been run correctly, your resulting file should look like this one. If the two look the same, you are all set!!! Running Python Now that you have successfully installed Python on your computer, you are ready to go! Now every time you want to launch the environment, called Jupyter Lab, you will need to follow these steps: Start by opening an Anaconda Prompt (remember: “Start Menu” –&gt; “Anaconda Prompt (miniconda3)”). Navigate to the folder that you want to work in using the cd command (for example, your home directory: C:\\Users\\username). Activate the GDS environment by running: conda activate gds Launch Jupyter lab by running the following command: jupyer lab This will launch Jupyter Lab in your default browser. TIP: It is recommended to use Firefox or Chrome. If your default browser is neither of the recommended, you can: Close the window that opens automatically Open Firefox/Chrome and paste the URL from the Anaconda Prompt: You should now be looking at an interface that looks very similar to this: If that is the case, CONGRATULATIONS!!! You are ready to go and start hacking away!!! "],
["windows-version.html", "Windows Specifications Windows Version Windows Architechture", " Windows Specifications Windows Version This guide shows you how to find out what version of Windows you are running. Here are the steps you need to follow: Right click on the Windows logo in the left bottom corner of your screen and click on system. You will find the version of your Windows under Windows Specifications and Edition (here it is Windows 10 Home as an example): Knowing the version you are running, you can then follow on to install Python for your version: If you are running Windows 10 Pro, head over here If you are running other versions, use this guide Windows Architechture IMPORTANT: This is only relevant if you do not have Windows 10 Pro If you are installing Python natively, you will need to know whether your computer is 32bit or 64bit, that is its architecture. Most modern computers are 64bit, so there is a good chance that is your case. However, please make sure to avoid trouble down the installation process. To check which architecture you have, follow these steps: Right click on the Windows logo in the left bottom corner of the task menu and select System This will bring you to your system information page The architecture of your computer can be found under the System type section (highlighted in red, for this example it is 64-bit): Knowing which architecture your computer has allows you to download the right version of Miniconda, one of the requirements for successful installation. "],
["references.html", "References", " References "]
]
